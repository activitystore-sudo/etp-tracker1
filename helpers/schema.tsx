/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type AssessorType = "Darren Cranston" | "Graham Keane" | "Ken Tougher" | "Maurice Ward" | "Stefan Persson" | "Tadgh Murphy";

export type FootType = "Dual" | "Left" | "Right";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type PositionType = "CAM/10" | "CB" | "CDM/6" | "GK" | "LB" | "LW" | "MID" | "RB" | "RW" | "ST" | "WB" | "WF";

export type TeamType = "13M" | "13P" | "14M" | "14P" | "15M" | "15P" | "16M" | "16P" | "Youths";

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface Assessments {
  assessmentDate: Timestamp;
  assessor: AssessorType;
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  physicalScore: number;
  playerId: number;
  psychologicalScore: number;
  socialScore: number;
  tacticalScore: number;
  technicalScore: number;
  updatedAt: Generated<Timestamp | null>;
}

export interface LoginAttempts {
  attemptedAt: Timestamp;
  email: string;
  id: Generated<number>;
  success: Generated<boolean>;
}

export interface Players {
  createdAt: Generated<Timestamp | null>;
  foot: FootType;
  id: Generated<number>;
  name: string;
  position: PositionType;
  team: TeamType;
  updatedAt: Generated<Timestamp | null>;
}

export interface Sessions {
  createdAt: Timestamp;
  expiresAt: Timestamp;
  id: string;
  lastAccessed: Timestamp;
  userId: number;
}

export interface UserPasswords {
  passwordHash: string;
  userId: number;
}

export interface Users {
  avatarUrl: string | null;
  createdAt: Generated<Timestamp>;
  displayName: string;
  email: string;
  id: Generated<number>;
  role: Generated<string>;
  status: Generated<string>;
}

export interface DB {
  assessments: Assessments;
  loginAttempts: LoginAttempts;
  players: Players;
  sessions: Sessions;
  userPasswords: UserPasswords;
  users: Users;
}


// Use these for zod schema enums or other purposes, since the kysely enums are just types
export const TeamTypeArrayValues: [TeamType, ...TeamType[]] = ["13M","13P","14M","14P","15M","15P","16M","16P","Youths"];
export const FootTypeArrayValues: [FootType, ...FootType[]] = ["Dual","Left","Right"];
export const PositionTypeArrayValues: [PositionType, ...PositionType[]] = ["CAM/10","CB","CDM/6","GK","LB","LW","MID","RB","RW","ST","WB","WF"];
export const AssessorTypeArrayValues: [AssessorType, ...AssessorType[]] = ["Darren Cranston","Graham Keane","Ken Tougher","Maurice Ward","Stefan Persson","Tadgh Murphy"];
// Note: kysely maps the table/column/enum names from snake_case to camelCase and PascalCase. When running SQL statements, make sure to use snake_case, but TypeScript code should use camelCase or PascalCase.